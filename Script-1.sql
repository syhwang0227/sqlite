SELECT *
FROM EMPLOYEES
order by SALARY desc, HIRE_DATE asc ;

SELECT DISTINCT JOB_ID 
FROM EMPLOYEES e ;

SELECT EMAIL || '@test.com'
FROM EMPLOYEES e ;

SELECT FIRST_NAME, SALARY, SALARY / 10 보너스
FROM EMPLOYEES e ;

SELECT *
FROM EMPLOYEES e 
--WHERE EMPLOYEE_ID > 100;
--WHERE SALARY > 10000 ;
WHERE SALARY BETWEEN 6000 and 10000 ;

SELECT *
FROM EMPLOYEES e 
WHERE FIRST_NAME  < 'B' ;

SELECT *
FROM EMPLOYEES e
WHERE EMPLOYEE_ID in (100, 101) ;

SELECT *
FROM EMPLOYEES e
WHERE COMMISSION_PCT IS NOT NULL ;

SELECT *
FROM EMPLOYEES e 
WHERE FIRST_NAME LIKE '%en' ; -- 맨 뒷글자가 en인 사람 출력

SELECT *
FROM EMPLOYEES e 
WHERE FIRST_NAME LIKE '%en%' ; -- 글자의 위치 상관없이 이름에 en이 들어가는 사람 출력

SELECT *
FROM EMPLOYEES e
WHERE JOB_ID LIKE 'ad___';  -- 밑줄의 수 = 글자의 수 

SELECT *
FROM EMPLOYEES e
WHERE JOB_ID LIKE 'ad___' AND FIRST_NAME LIKE 'ne%';

SELECT UPPER(FIRST_NAME) 
FROM EMPLOYEES e ;

SELECT JOB_ID , SUBSTRING(JOB_ID, 1, 2) 
FROM EMPLOYEES e ;

SELECT JOB_ID , REPLACE (JOB_ID, '_', '___') 
FROM EMPLOYEES e ;

SELECT FIRST_NAME , SUBSTRING(PHONE_NUMBER, 1, 8) || '****'   
FROM EMPLOYEES e ;

SELECT 1, 'test' ;

SELECT SALARY , SALARY / 30 , round(SALARY / 30, 2) 
FROM EMPLOYEES e ;

SELECT SALARY , SALARY / 30 , round(SALARY / 30, 2) 
FROM EMPLOYEES e ;

-- 형변환
SELECT SALARY, CAST(salary AS text) FROM EMPLOYEES e;

SELECT SALARY, CAST(salary AS int) FROM EMPLOYEES e ;

SELECT ifnull(MANAGER_ID, 1)
FROM DEPARTMENTS d ;

-- 이러한 내용은 보통 서버에서 처리
SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME , SALARY ,
	CASE
		WHEN salary >= 9000 then '상위'
		WHEN salary between 6000 and 8999 then '중위'
		ELSE '하위'  -- 나머지는 하위
	END as 급여등급
FROM EMPLOYEES e 
WHERE JOB_ID = 'IT_PROG' ;

--SELECT FIRST_NAME ,
--	CASE JOB_ID 
--		where 'AD_PRES' then 
--		ELSE '기타'
--	end AS '1'
--FROM EMPLOYEES e  ;

SELECT SUM(SALARY), AVG(SALARY), MAX(SALARY), MIN(SALARY)  
FROM EMPLOYEES e ;

SELECT JOB_ID , SUM(SALARY) AS 총급여
FROM EMPLOYEES e
WHERE EMPLOYEE_ID >= 10
GROUP BY JOB_ID  -- SELECT 절에 있어야 한다.
ORDER BY 총급여 DESC ;


SELECT JOB_ID , SUM(SALARY) AS 총급여
FROM EMPLOYEES e
WHERE EMPLOYEE_ID >= 10
GROUP BY JOB_ID
HAVING SUM(SALARY) > 40000
ORDER BY 총급여 DESC ;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID, d.DEPARTMENT_NAME 
FROM EMPLOYEES e , DEPARTMENTS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID ;

-- 위와 완전히 똑같이 나온다.
SELECT e.FIRST_NAME , e.DEPARTMENT_ID, d.DEPARTMENT_NAME 
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID, d.DEPARTMENT_NAME 
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE e.SALARY > 5000 ;


SELECT e.FIRST_NAME , e.DEPARTMENT_ID, d.DEPARTMENT_NAME 
FROM EMPLOYEES e
LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;

SELECT e.EMPLOYEE_ID, e.FIRST_NAME , e2.EMPLOYEE_ID 매니저ID , e.FIRST_NAME 매니저
FROM EMPLOYEES e 
JOIN EMPLOYEES e2 ON e.MANAGER_ID = e2.EMPLOYEE_ID ;

-- 출력은 되지만 서버에서 터진다. type이 다르다.
SELECT DEPARTMENT_ID
FROM EMPLOYEES e 
UNION ALL
SELECT FIRST_NAME 
FROM EMPLOYEES e ;

SELECT DEPARTMENT_ID
FROM EMPLOYEES e 
UNION
SELECT DEPARTMENT_ID 
FROM EMPLOYEES e ;

SELECT *
FROM EMPLOYEES e
WHERE EMPLOYEE_ID = 100 ;

SELECT EMPLOYEE_ID 
FROM EMPLOYEES e ;

SELECT EMPLOYEE_ID 
FROM EMPLOYEES e
WHERE EMPLOYEE_ID = 100 ;

SELECT *
FROM EMPLOYEES e
WHERE e.SALARY = (
					SELECT SALARY
					FROM EMPLOYEES e2 
					WHERE LAST_NAME = 'De Haan'
				);

-- 위 표현보다 더 적합 
SELECT *
FROM EMPLOYEES e
WHERE e.SALARY in (
					SELECT SALARY
					FROM EMPLOYEES e2 
					WHERE LAST_NAME = 'De Haan'
				);

SELECT *
FROM EMPLOYEES e
WHERE e.SALARY = 17000 ; 

-- 위 표현보다 더 적합
SELECT *
FROM EMPLOYEES e
WHERE e.SALARY in (17000) ;

SELECT *
FROM EMPLOYEES e
WHERE e.SALARY = (
					SELECT SALARY
					FROM EMPLOYEES e2 
					WHERE LAST_NAME = 'De Haan'
				);

-- King / = 과 in 잘 구분하기 
SELECT *
FROM EMPLOYEES e
WHERE e.SALARY = (
					SELECT SALARY
					FROM EMPLOYEES e2 
					WHERE LAST_NAME = 'King'
				);

SELECT *
FROM EMPLOYEES e
WHERE e.SALARY in (
					SELECT SALARY
					FROM EMPLOYEES e2 
					WHERE LAST_NAME = 'King'
				);
				
SELECT JOB_ID , MIN(SALARY)
FROM EMPLOYEES e
GROUP BY JOB_ID ;

SELECT *
FROM EMPLOYEES e
WHERE (e.JOB_ID, e.SALARY) IN (
								SELECT JOB_ID , MIN(SALARY) 그룹별급여
								FROM EMPLOYEES e
								GROUP BY JOB_ID
								)
ORDER BY e.SALARY DESC ;

SELECT DEPARTMENT_ID
From DEPARTMENTS d 
WHERE DEPARTMENT_NAME = 'IT';

SELECT *
FROM EMPLOYEES e
JOIN (
	SELECT DEPARTMENT_ID 
	FROM DEPARTMENTS d
	WHERE DEPARTMENT_NAME = 'IT'
	) AS d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ; 

SELECT *
FROM (
	SELECT *
	FROM EMPLOYEES e 
	WHERE salary > 6000
	);

SELECT *
FROM (
	SELECT first_name , salary, RANK() OVER(ORDER BY salary)
	FROM EMPLOYEES e 
	WHERE salary > 6000
	);

SELECT *
FROM (
	SELECT first_name , salary, RANK() OVER(ORDER BY salary desc) 순위
	FROM EMPLOYEES e 
	WHERE salary > 6000
	)
WHERE 순위 < 6 ;

SELECT *
FROM REGIONS r ;

INSERT INTO REGIONS values(5, '금성') ;

INSERT INTO REGIONS (region_id) values(6);

INSERT INTO REGIONS (region_name) values('수성');

UPDATE REGIONS SET REGION_NAME = '화성'
WHERE REGION_ID = 6 ;

DELETE FROM REGIONS WHERE REGION_ID = 7;

DELETE FROM REGIONS WHERE REGION_ID in (5, 6);



















